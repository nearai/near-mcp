#!/usr/bin/env node

import { spawn } from 'node:child_process';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const tsxPath = resolve(__dirname, '../node_modules/.bin/tsx');
const code = "import { execute } from '@oclif/core';await execute({dir: import.meta.url})";
const args = process.argv.slice(2);

try {
  const child = spawn(tsxPath, ['--no-warnings', '-', ...args], {
    stdio: ['pipe', 'inherit', 'inherit'],
  });
  child.stdin.write(code);
  child.stdin.end();
  child.on('error', (err) => {
    console.error('Failed to start child process:', err);
    process.exit(1);
  });
  child.on('exit', (code, signal) => {
    if (signal) {
      console.error(`Process terminated with signal: ${signal}`);
      process.exit(1);
    }
    process.exit(code || 0);
  });
  ['SIGINT', 'SIGTERM', 'SIGQUIT'].forEach(signal => {
    process.on(signal, () => {
      child.kill(signal);
    });
  });
} catch (error) {
  console.error('Failed to execute script:', error);
  process.exit(1);
}